buildscript {
	ext {
		springBootVersion = '3.0.5'
		sonarVersion = '4.0.0.2929'
		jacocoVersion = '0.8.8'
        lombokVersion = '1.18.24'
	}
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "3.0.5"
    id 'org.sonarqube' version "4.0.0.2929"
    id 'jacoco' 
    
}

group = 'com.elenaldo'
version = '1.0'

allprojects{
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects{
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '17'

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    test {
        useJUnitPlatform()
        afterTest { desc, result ->
            logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
        finalizedBy(project.tasks.jacocoTestReport)
    }


    jacocoTestReport {
        dependsOn test
        reports {
            xml.required.set true
            xml.destination file("${buildDir}/reports/jacoco.xml")
            csv.required.set false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/model/**', '**/config/**','**/metrics/**'])
            }))
        }
    }
}

sonar {
    def modules = subprojects.projectDir.collect { "${it.toString().replace(project.projectDir.toString() + "/", "")}" }
    properties {
        property "sonar.sourceEnconding", "UTF-8"
        property "sonar.modules", "${modules.join(',')}"
        property "sonar.sources", "src,deployment,settings.gradle,main.gradle,build.gradle,${modules.collect { "${it}/build.gradle" }.join(',')}"
        property "sonar.test", "src/test"
        property "sonar.java.binaries", ""
        property "sonar.junit.reportsPath", ""
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", "**/model/**,**/config/**,**/metrics/**,**/app/**,**/test/**"
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = file("$buildDir/reports")
}

task jacocoMergedReport(type: JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.required.set true
        csv.required.set  false
        html.required.set  true
    }
}

project.tasks["sonarqube"].dependsOn "jacocoMergedReport"


tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}
tasks.named('wrapper') {
    gradleVersion = '8.0.2'
}

bootJar {
    enabled = false
}

bootRun {
    enabled = false
}